# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import re
from docutils import nodes
from sphinx.errors import SphinxError
try:
    from urllib import unquote  # Python 2.X
except ImportError:
    from urllib.parse import unquote  # Python 3+
# import sys
# sys.path.insert(0, os.path.abspath('.'))
IS_READTHEDOCS = os.environ.get('READTHEDOCS') == 'True'
docs_dir = os.path.dirname(__file__)

# -- Project information -----------------------------------------------------

project = 'ROC-RK3328-CC'
_project_filename = 'ROC-RK3328-CC_Manual'
copyright = '2018, Firefly Team'
author = 'Firefly Team'

# The short X.Y version
version = '1.0'
# The full version, including alpha/beta/rc tags
release = '1.0.0'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.githubpages',
    'sphinxprettysearchresults'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md']

# Pinyin Support
from pypinyin import lazy_pinyin
def to_pinyin(self, s):
    s = ' '.join(lazy_pinyin(s))
    s = nodes.fully_normalize_name(s)
    return nodes.make_id(s)

# Markdown Support
from recommonmark.parser import CommonMarkParser
CommonMarkParser.translate_section_name  = to_pinyin
source_parsers = {
	'.md': CommonMarkParser,
}

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'zh_CN'

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr', 'zh'
html_search_language = 'zh'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'sphinx-markdown', 'README.md', 'include', 'private', 'share']


# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
import sphinx_rtd_theme
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
if not IS_READTHEDOCS:
	html_theme_options = {
	    'product_show': True,
	    'product_name': 'ROC-RK3288-CC',
	    'product_img': 'http://www.t-firefly.com/upload/portal/20180528/e390c2e0c48911a7be83cef0208fd889.png',
	    'product_des_one': '',
	    'product_des_two': 'Firefly 首个超小型开源主板，特有的 USB 3.0 与 DDR4 让其性能更快更稳定，超高性价比的 ROC-RK3328-CC 是你探索程序世界的首选。',
	    'product_buy': 'https://store.t-firefly.com/goods.php?id=66',
	    'product_regula': 'http://download.t-firefly.com/%E4%BA%A7%E5%93%81%E8%A7%84%E6%A0%BC%E6%96%87%E6%A1%A3/ROC-RK3328-CC%E4%BA%A7%E5%93%81%E8%A7%84%E6%A0%BC%E4%B9%A6V1.0.pdf',
	    'product_buy_lang': '立即购买',
	    'product_regula_lang': '产品规格书'
	}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

html_logo = 'img/firefly-icon-64.png'

# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = _project_filename


# -- Options for LaTeX output ------------------------------------------------

if IS_READTHEDOCS:
    latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    'preamble': r'''
    \hypersetup{unicode=true}
    \usepackage{CJKutf8}
    \DeclareUnicodeCharacter{00A0}{\nobreakspace}
    \DeclareUnicodeCharacter{2203}{\ensuremath{\exists}}
    \DeclareUnicodeCharacter{2200}{\ensuremath{\forall}}
    \DeclareUnicodeCharacter{2286}{\ensuremath{\subseteq}}
    \DeclareUnicodeCharacter{2713}{x}
    \DeclareUnicodeCharacter{27FA}{\ensuremath{\Longleftrightarrow}}
    \DeclareUnicodeCharacter{221A}{\ensuremath{\sqrt{}}}
    \DeclareUnicodeCharacter{221B}{\ensuremath{\sqrt[3]{}}}
    \DeclareUnicodeCharacter{2295}{\ensuremath{\oplus}}
    \DeclareUnicodeCharacter{2297}{\ensuremath{\otimes}}
    \begin{CJK}{UTF8}{gbsn}
    \AtEndDocument{\clearpage\end{CJK}}
    ''',
    }
else:
    latex_elements = {
        'papersize' : 'a4paper',
        'utf8extra' : '',
        'inputenc'  : '',
        'babel'     : r'''\usepackage[english]{babel}''',
        'preamble' : r'''
        \usepackage{ctex}
        ''',
    }
    latex_engine = 'xelatex'

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, _project_filename+'.tex', project,
     author, 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, _project_filename.lower(), project,
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, _project_filename, project,
     author, project, 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

from recommonmark.transform import AutoStructify
def setup(app):
    # Fixing how references (local links) work with Markdown
    app.connect('doctree-read', collect_ref_data)
    app.connect('doctree-resolved', process_refs)

    # Better support for Markdown (see https://recommonmark.readthedocs.io/en/latest/auto_structify.html)
    app.add_config_value('recommonmark_config', {
        'enable_eval_rst': True,
        'enable_auto_toc_tree': True,
        'auto_toc_tree_section': 'Contents',
    }, True)
    app.add_transform(AutoStructify)

# -- Markdown References --------------------------------------------------
# https://github.com/apiaryio/dredd/blob/a0e999d69ee840778de191fd03acbdeda86e27e2/docs/conf.py#L176:61
def collect_ref_data(app, doctree):
    """
    Finds all anchors and references (local links) within documents,
    and saves them as meta data
    """
    filename = doctree.attributes['source'].replace(docs_dir, '').lstrip('/')
    docname = filename.replace('.md', '')

    anchors = []
    references = []

    for node in doctree.traverse(nodes.raw):
        if 'name=' in node.rawsource:
            match = re.search(r'name="([^\"]+)', node.rawsource)
            if match:
                anchors.append(match.group(1))
        elif 'id=' in node.rawsource:
            match = re.search(r'id="([^\"]+)', node.rawsource)
            if match:
                anchors.append(match.group(1))

    for node in doctree.traverse(nodes.section):
        for target in frozenset(node.attributes.get('ids', [])):
            anchors.append(target)

    for node in doctree.traverse(nodes.reference):
        uri = node.get('refuri')
        if uri and not uri.startswith(('http://', 'https://')):
            references.append(to_reference(uri, basedoc=docname))

    app.env.metadata[docname]['anchors'] = anchors
    app.env.metadata[docname]['references'] = references

def process_refs(app, doctree, docname):
    """
    Fixes all references (local links) within documents, breaks the build
    if it finds any links to non-existent documents or anchors.
    """
    if not 'references' in app.env.metadata[docname]:
        return
    for reference in app.env.metadata[docname]['references']:
        referenced_docname, anchor = parse_reference(reference)

        if referenced_docname not in app.env.metadata:
            message = "Document '{}' is referenced from '{}', but it could not be found"
            raise SphinxError(message.format(referenced_docname, docname))

        if anchor and anchor not in app.env.metadata[referenced_docname]['anchors']:
            message = "Section '{}#{}' is referenced from '{}', but it could not be found"
            raise SphinxError(message.format(referenced_docname, anchor, docname))

        for node in doctree.traverse(nodes.reference):
            uri = node.get('refuri')
            if to_reference(uri, basedoc=docname) == reference:
                node['refuri'] = to_uri(app, referenced_docname, anchor)

def to_uri(app, docname, anchor=None):
    #uri = ''
    #if IS_READTHEDOCS:
    #    language = app.config.language or 'en'
    #    version_name = os.environ.get('READTHEDOCS_VERSION')
    #    uri = '/{}/{}'.format(language, version_name)
    #uri += '/{}.html'.format(docname)

    uri = '{}.html'.format(docname)
    if anchor:
        uri += '#{}'.format(anchor)

    return uri

def to_reference(uri, basedoc=None):
    """
    Helper function, compiles a 'reference' from given URI and base
    document name
    """
    if '#' in uri:
        filename, anchor = uri.split('#', 1)
        filename = filename or basedoc
        anchor = to_pinyin(None, unquote(anchor))
    else:
        filename = uri or basedoc
        anchor = None

    if not filename:
        message = "For self references like '{}' you need to provide the 'basedoc' argument".format(uri)
        raise ValueError(message)

    reference = os.path.splitext(filename.lstrip('/'))[0]
    if anchor:
        reference += '#' + anchor
    return reference

def parse_reference(reference):
    """
    Helper function, parses a 'reference' to document name and anchor
    """
    if '#' in reference:
        docname, anchor = reference.split('#', 1)
    else:
        docname = reference
        anchor = None
    return docname, anchor
